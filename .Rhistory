a[[7]] <- "Johnson"
a
a <- c(a,c("Mary"))
a
a[[7]] <- "Johnson"
a
a <- c(a,c("Mary"))
a
a[[7]] <- "Johnson"
a
a <- c(a,c("Mary"))
a
a[[7]] <- "Johnson"
a
a <- c(a,c("Mary"))
a
a[[7]] <- "Johnson"
a
a <- c(a,c("Mary"))
a
a[[7]] <- "Johnson"
a[[7]] <- "Johnson"
a <- c("1","b","TRUE")
a
a[[2]] <- "c" # 元素存在: 替換
a[[4]] <- "7" # 元素不存在： 增加
a[c(5,6)] <- c("J", "K")
a
a[[7]] <- "Johnson"
a
a <- c(a,c("Mary"))
a
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
)
)
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")
# 新增資料
list1[[2]] <- list(
name="Mary",
birthday=ymd("1998-08-24")
)
str(list1)
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
)
)
str(list1)
list1[[2]]$status <- c(height=163, weight=45)
list1[[2]]$status <- c(height=163, weight=45)
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")
# 新增資料
list1[[2]] <- list(
name="Mary",
birthday=ymd("1998-08-24")
)
str(list1)
list1[[2]]$status <- c(height=163, weight=45)
list1[[1]]$status[["height"]] <- 176
str(list1)
list1[[1]][["age"]] <- 21
list1[[2]]["age"] <- list(21)
# 改變「一個」時，使用[[ ]]比較不會錯。
str(list1)
list1[[1]][c("bloodType","registered")] <- list("AB",TRUE)
str(list1)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
listExample[[2]][[1]][[2]] <- list(name="產業經濟學")
View(listExample)
listExample[[2]][[1]][[2]][c("teacher","grade")] <- list("Wen",
88)
View(listExample)
print(a)
a[-c(1,3)]
a[c(-2)]
print(a)
a[-c(1,3)] -> a # 要回存才算真的刪除
print(a)
a[-c(1,3)]
a[c(-2)]
print(a)
a[-c(1,3)] -> a # 要回存才算真的刪除
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
),
list(
name="Mary",
birthday=ymd("1998-08-24"),
status=c(height=163, weight=45),
age=21,
bloodType="AB"
)
)
str(list1)
list1[[1]][[-3]]
list1[[1]][-3]
list1[[1]][-3] -> list1[[1]]
list1[[1]][-3] -> list1[[1]]
list1[[2]][-c(3,5)]
list1[[1]][-3] -> list1[[1]]
list1[[2]][-c(3,5)] -> list1[[2]]
View(list1)
library(jsonlite)
fromJSON("https://data.ntpc.gov.tw/od/data/api/54DDDC93-589C-4858-9C95-18B2046CC1FC?$format=json", simplifyDataFrame = F) -> newTaipeiYouBike
View(newTaipeiYouBike)
#方法一
newTaipeiYouBike[[34]][-c(2,9)] -> newTaipeiYouBike[[34]]
View(newTaipeiYouBike)
#方法一
newTaipeiYouBike[[34]][-c(2,9)] -> newTaipeiYouBike[[34]]
#方法二
newTaipeiYouBike[[11]][c(4,11)] -> NULL
#方法一
newTaipeiYouBike[[34]][-c(2,9)] -> newTaipeiYouBike[[34]]
#方法二
newTaipeiYouBike[[11]][c(4,11)] <- NULL
View(newTaipeiYouBike)
knitr::opts_chunk$set(echo = TRUE)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a+b
a-b
a*b
a/b
a %% b
# 相當於
c(2%%4, 3%%(-1), 5%%3)
a ** b
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
print(sequenceNums)
sequenceNums %% 2 # 餘數為1則是奇數，0則是偶數
paste0(
c("他叫","我叫"), c("小明","小美","大雄")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example[c("name","height")])
pick_above170 <- example$height >= 170
example$height
c(175, 166, 170, 160) >= 170
example$name[pick_above170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
# 只要成績大於85的
pick_above85 <-
transcript100to103$`成績` > 85
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
print(example[c("name","birthday")])
pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")
example$name[pick_after98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
# 只要1998年1月（含）以後的
library(lubridate)
pick_after98_01 <-
exchangeRate$期間 >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
example$allowance <-
ordered(example$allowance)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
example$allowance <-
factor(
example$allowance,
levels=c("0-1000", "1001-2000", "2000+"),
ordered = T # 設定為可排序factor
)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
# 先將類別資料設定成可排序類別資料
list_victimAges_female$年齡層 <-
ordered(list_victimAges_female$年齡層)
pick_above30 <-
list_victimAges_female$年齡層 >= "30_39歲"
sum(list_victimAges_female$數目, na.rm=T)
sum(list_victimAges_female$數目[pick_above30], na.rm = T)
print(example[c("name","bloodType")])
pick_bloodB <- example$bloodType == "B"
example$name[pick_bloodB]
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums %% 2) == 0
sequenceNums[pick_evens]
x <- c(1,5,8)
y <- c(5,8)
# x裡的元素值是不是屬於y集合
x %in% y
print(example[c("name","residence")])
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <- example$residence %in% set_TaipeiMetro
example$name[pick_fromTaipeiMetro]
set_lawbusiness <- c("法學院","商學院")
pick_lawBusiness <- transcript100to103$學院 %in% set_lawbusiness
transcript100to103$學院[pick_lawBusiness]
levels(factor(transcript100to103$學院))
unique(transcript100to103$學院)
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
pick_not_fromTaipeiMetro <- ! pick_fromTaipeiMetro
# 或
pick_not_fromTaipeiMetro <- !(example$residence %in% set_TaipeiMetro) # (..) 裡面會先運算完才做外面!的處理
print(example[c("name","residence")])
example$name[pick_fromTaipeiMetro]
example$name[pick_not_fromTaipeiMetro]
print(example[c("name","weight")])
pick_na <- is.na(example$weight)
example$name[pick_na]
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
garbageRoutes$linename[pick_afternoonRoutes]
# 由linename元素判斷垃圾車有幾條路線。
factor(garbageRoutes$linename) -> garbageRoutes$linename
levels(garbageRoutes$linename)
# 由linename創造： 可篩選出下午路線的「要/不要」向量pick_afternoonRoutes。
pick_afternoonRoutes <-
stringr::str_detect(
garbageRoutes$linename,
"下午"
)
garbageRoutes$linename[pick_afternoonRoutes]
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
pick_pneumonia <- stringr::str_detect(CDC_chatbox$Question,"肺炎")
CDC_chatbox <- readr::read_csv("http://od.cdc.gov.tw/pr/CDC_chatbox.csv")
pick_pneumonia <- stringr::str_detect(CDC_chatbox$Question,"肺炎")
CDC_chatbox$Question[pick_pneumonia]
knitr::opts_chunk$set(echo = TRUE)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
str(example)
pick_above170 <- example$height >= 170
pick_bloodB <- example$bloodType == "B"
pick_loveFood <-
stringr::str_detect(example$hobby,"美食")
pick_na <- is.na(example$weight)
pick_after98 <-
example$birthday >= lubridate::ymd("1998-01-01")
set_TaipeiMetro <- c("Taipei","New Taipei")
pick_fromTaipeiMetro <-
example$residence %in% set_TaipeiMetro
str(example[c("name","hobby","bloodType")])
example$name[
pick_loveFood & pick_bloodB
]
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
example$name[
pick_after98 & pick_fromTaipeiMetro & pick_bloodB
]
example[c("name","birthday","residence")]
example$name[
pick_after98 | !pick_fromTaipeiMetro
]
install.packages("stringr")
install.packages("glue")
knitr::opts_chunk$set(echo = TRUE)
library(stringr)
library(glue)
str_sub("410873002", 5, 6)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
install.packages("htmlwidgets")
library(htmlwidgets)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
detach("package:htmlwidgets", unload = TRUE)
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
library(htmlwidgets)
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
detach("package:htmlwidgets", unload = TRUE)
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
strip1 <- strip2 <- strip3 <- "[0-9]"
strip4 <- "號"
myRegexSlotMachine <- paste0(strip1,strip2,strip3,strip4)
myRegexSlotMachine <- paste0(strip1,strip2,strip3,strip4)
myRegexSlotMachine <- paste0(strip1,strip2,strip3,strip4)
str_extract(addresses,myRegexSlotMachine)
print(myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
c(
"https://github.com/student1/108-2-78-inclass-practice",
"github.com/student2 / 108-2-56-inclass-practice",
"https://github.com/student3/108-2-56-inclass-practice",
"student4 / 108-2-56-inclass-practice",
"student5"
) -> studentGithubURLs
target_regex <-
"^https://github.com/[:graph:]+/108-2-(56|78)-inclass-practice"
str_detect(
studentGithubURLs, target_regex
)
